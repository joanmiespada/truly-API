openapi: '3.0.0'
info:
  version: '0.0.1'
  title: Truly API
servers:
  - url: 'https://api.truly.video'
paths:
  /auth/signup:
    post:
      operationId: 'createUser'
      requestBody:
        description: 'User object to be created'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
      responses:
        '201':
          description: A new user has been created successfully.
        '400':
          description: Bad request, some data in body is invalid or missing. Check response for details.
  /auth/login:
    post:
      operationId: 'login'
      requestBody:
        description: 'Login object to be checked'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginByEmailAndPasswordRequest'
      responses:
        '200':
          description: Login successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginByEmailAndPasswordResponse'
        '400':
          description: Credentials provided aren't correct, check email field as email pattern and password specification.
        '403':
          description: User has been deactivated.
        '404':
          description: Email not found or password doesn't match. Check credentials and try again.
  /api/user:
    get:
      operationId: 'GetUserInfo'
      responses:
        "200":
          description: "Information about the userd loggeda: user_id, time stamps, roles, email and/or device and user's status."
      security:
        - BearerAuth: []

    post:
      operationId: "UpdateUserInfo"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        "200":
          description: "user field/s have been updated successfully."
      security:
        - BearerAuth: []

  /api/user/password:
    post:
      operationId: "UpdateUserPassword"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                password: 
                  type: 'string'
                  description: Check rules at NewUserRequest object
      responses:
        "200":
          description: "user field/s have been updated successfully."
      security:
        - BearerAuth: []

  /api/asset:
    post:
      operationId: "CreateUserAsset"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                url: 
                  type: string
                  description: Check rules at NewUserRequest object
                hash:
                  type: string
                  description: Hash computed at origin
                hashAlgorithm:
                  type: string
                  description: Algorithm used to compute hash
      responses:
        "201":
          description: "Asset have been created successfully."
      security:
        - BearerAuth: []
     

components:
  securitySchemes:
    BearerAuth:           
      type: 'http'
      scheme: 'bearer'
  responses:
    '500':
      description: System error, something unexpected happen in runtime. Retry again.
  schemas:
    NewUserRequest:
      type: 'object'
      description: This object describes a new user in the system. It accepts email or device fields. Only if email is provided, the password is mandatory.
      properties: 
        email:
          type: 'string'
          example: 'test1@test1.er.io'
        password:
          type: 'string'
          example: 'Ay7pert&*fg'
          description: Minimum length 8 and max 50 characters, at least 1 symbol, 1 number and 1 mayus must be provided.
        device:
          type: 'string'
          example: 'd4567-1234-1234-1234-1234-4567'
    LoginByEmailAndPasswordRequest:
      type: 'object'
      description: This object holds login data using email and password.
      properties: 
        email:
          type: 'string'
          example: 'me@truly.video'
        password:
          type: 'string'
          description: Check newUser object to see password details.
    LoginByEmailAndPasswordResponse:
      type: 'object'
      description: It will provide data to be stored in the client and provided in each API method that require authentication.
      required:
        - message
      properties: 
        message: 
          type: object
        token:
          type: 'string'
          description: JWT token to identify the user, it needs to be renewed after some time (usually 1h).
    UserUpdateRequest:
      type: 'object'
      description: This object describes user's in the system. All user's info will be retrieved without sensitive information.
      properties: 
        email:
          type: 'string'
          example: 'test1@test1.er.io'
        device:
          type: 'string'
          example: 'd4567-1234-1234-1234-1234-4567'
        